#!/usr/bin/perl

=head1 NAME

pristine-comp - regenerate pristine compressed files

=head1 SYNOPSIS

B<pristine-comp> [-vdkt] gendelta I<file.(gz|bz2)> I<delta>

B<pristine-comp> [-vdk]  gencomp I<delta> I<file>

B<pristine-comp> [-vdkt] flatten < I<file.(gz|bz2)> > I<file.flat>

B<pristine-comp> [-vdk]  unflatten < I<file.flat> > I<file.(gz|bz2)>

=head1 DESCRIPTION

pristine-comp is an auxiliary command for handling compressed files.
It is invoked by pristine-tar(1) to handle .tar.gz and .tar.bz2 archives.

Git can use pristine-comp as a filter for compressed files. This is enabled
through gitattributes(5), as described in the GIT INTEGRATION section.

pristine-comp B<gendelta> takes the specified compressed file (gz or bz2), and
generates a small binary I<delta> file that can later be used by pristine-comp
gencomp to recreate the original file.

pristine-comp B<gencomp> takes the specified I<delta> file, and compresses
the specified input I<file> (which must be identical to the contents
of the original compressed file). The resulting file will be identical to
the original compressed file used to create the delta.

pristine-comp B<flatten> transforms a compressed file on standard input
into its flat equivalent on standard output.

pristine-comp B<unflatten> reverses a flatten operation. It takes the
output of pristine-comp flatten on standard input and compresses it
to standard output. The output data is identical to the original
flatten input.

If the delta filename is "-", pristine-comp reads or writes it to stdio.

=head1 HOW IT WORKS

The approach used to regenerate an original gz file is to figure out how
it was produced -- what compression level was used, whether it was built
with GNU gzip(1) or with a library or BSD version, whether the --rsyncable
option was used, etc, and to reproduce this build environment when
regenerating the gz.

This approach will work for about 99.5% of cases. One example of a case it
cannot currently support is a gz file that has been produced by appending
together multiple gz files.

For the few where it doesn't work, a binary diff will be included in the
delta between the closest regneratable gz file and the original. In
the worst case, the diff will include the entire content of the original
gz file, resulting in a larger than usual delta. If the delta is much
larger than usual, pristine-comp will print a warning.

Likewise, to regenerate an original bz2 file pristine-comp figures out
how it was produced -- what compression level was used, whether it was
built with bzip2(1) or with pbzip2(1). Other tools exist, like bzip2smp
or dbzip2, but they are said to be bit-identical with bzip2. bzip2 being
the most widespread implementation, it's hard to find bzip2 files that
make pristine-comp fail. Please report any!

The deprecated bzip1 compression method hasn't been implemented.

=head1 GIT INTEGRATION

pristine-comp can be used to transform compressed files into equivalent,
uncompressed flat files. The transformation is reversible to restore the
compressed files with complete accuracy.

Flat files support delta compression, and can be efficiently stored
in git. When the uncompressed files are diff-friendly, the flat files
also are.

To have git store compressed files as flat files, run:

	git config --global filter.pristine-comp.clean \
		'pristine-comp flatten'
	git config --global filter.pristine-comp.smudge \
		'pristine-comp unflatten'

Then, in a git repository, add the following entries to gitattributes(5):

	echo '*.gz   filter=pristine-comp -text' >> .gitattributes
	echo '*.bz2  filter=pristine-comp -text' >> .gitattributes
	echo '*.tgz  filter=pristine-comp -text' >> .gitattributes
	echo '*.tbz2 filter=pristine-comp -text' >> .gitattributes

=head1 OPTIONS

=over 4

=item -v

=item --verbose

Verbose mode, show each command that is run.

=item -d

=item --debug

Debug mode.

=item -k

=item --keep

Don't clean up the temporary directory on exit.

=item -t

=item --try

Try harder to determine how to generate deltas of difficult bz2 files.

=item -c (gz|bz2)

=item --compression (gz|bz2)

Enforce a given compression format. If the input (compressed file or delta)
doesn't match the compression format, pristine-comp will exit with an
error message.

The pristine-gz and pristine-bz2 aliases implicitly set the compression
format, and will refuse a contradicting flag.

=back

=head1 ENVIRONMENT

=over 4

=item B<TMPDIR>

Specifies a location to place temporary files, other than the default.

=back

=head1 AUTHOR

	Joey Hess <joeyh@debian.org>,
	Faidon Liambotis <paravoid@debian.org>
	Cyril Brulebois <cyril.brulebois@enst-bretagne.fr>
	Josh Triplett <josh@joshtriplett.org>
	Gabriel de Perthuis <g2p.code@gmail.com>

Licensed under the GPL, version 2.

=cut

use warnings;
use strict;
use File::Temp;
use Getopt::Long;
use File::Basename qw/basename/;
use IPC::Open2;
use URI::Escape;
use MIME::Parser;
use Digest::SHA;
use POSIX qw(:sys_wait_h); # WEXITSTATUS

# magic identification
use constant BZIP2_ID1		 => 0x42;
use constant BZIP2_ID2		 => 0x5a;

# compression methods, 'h' for Bzip2 ('H'uffman coding), '0' for Bzip1 (deprecated)
use constant BZIP2_METHOD_HUFFMAN => 0x68;

my @supported_bzip2_programs = qw(bzip2 pbzip2 zgz);

# magic identification
use constant GZIP_ID1		 => 0x1F;
use constant GZIP_ID2		 => 0x8B;

# compression methods, 0x00-0x07 are reserved
use constant GZIP_METHOD_DEFLATE => 0x08;

# flags
use constant {
	GZIP_FLAG_FTEXT		 => 0,
	GZIP_FLAG_FHCRC		 => 1,
	GZIP_FLAG_FEXTRA	 => 2,
	GZIP_FLAG_FNAME		 => 3,
	GZIP_FLAG_FCOMMENT	 => 4,
	# the rest are reserved
};
# compression level
use constant {
	GZIP_COMPRESSION_NORMAL	 => 0,
	GZIP_COMPRESSION_BEST	 => 2,
	GZIP_COMPRESSION_FAST	 => 4,
};
# operating systems
use constant {
	GZIP_OS_MSDOS		 => 0,
	GZIP_OS_AMIGA		 => 1,
	GZIP_OS_VMS		 => 2,
	GZIP_OS_UNIX		 => 3,
	GZIP_OS_VMCMS		 => 4,
	GZIP_OS_ATARI		 => 5,
	GZIP_OS_HPFS		 => 6,
	GZIP_OS_MACINTOSH	 => 7,
	GZIP_OS_ZSYSTEM		 => 8,
	GZIP_OS_CPM		 => 9,
	GZIP_OS_TOPS		 => 10,
	GZIP_OS_NTFS		 => 11,
	GZIP_OS_QDOS		 => 12,
	GZIP_OS_RISCOS		 => 13,
	GZIP_OS_VFAT             => 14,
	GZIP_OS_UNKNOWN		 => 255,
};

my $verbose=0;
my $debug=0;
my $keep=0;
my $try=0;
# undef, we check for defined later
my $compression=undef;

sub usage {
	print STDERR "Usage: pristine-comp [-vdkt] gendelta file.(gz|bz2) delta\n";
	print STDERR "       pristine-comp [-vdk]  gencomp delta file\n";
	print STDERR "       pristine-comp [-vdkt] flatten\n";
	print STDERR "       pristine-comp [-vdk]  unflatten\n";
	print STDERR "Compatiblity:\n";
	print STDERR "       pristine-comp [-vdk]  genbz2 delta file\n";
	print STDERR "       pristine-comp [-vdk]  gengz delta file\n";
}

sub debug {
	print STDERR "debug: @_\n" if $debug;
}

sub vprint {
	print STDERR "pristine-comp: @_\n" if $verbose;
}

sub doit {
	vprint(@_);
	if (system(@_) != 0) {
		die "command failed: @_\n";
	}
}

sub doit_redir_opts {
	no warnings 'once';
	my ($in, $out, $opts, @args) = @_;
	vprint(@args, "<", $in, ">", $out);
	open INFILE, "<", $in or die("Could not open '$in' for reading: $!\n");
	open OUTFILE, ">", $out or die("Could not open '$out' for reading: $!\n");
	my $pid = open2(">&OUTFILE", "<&INFILE", @args);
	waitpid $pid, 0;
	my $exit_status = WEXITSTATUS($?);
	my @ok_status = (0,);
	if (defined $opts->{ok_status}) {
		@ok_status =  @{$opts->{ok_status}};
	}
	if (not grep($_ == $exit_status, @ok_status)) {
		die "Command @args failed with exit status $exit_status";
	}
}

sub doit_redir {
	my ($in, $out, @args) = @_;
	doit_redir_opts($in, $out, {}, @args);
}

sub require_supported_compression {
	if ($compression ne 'gz' and $compression ne 'bz2') {
		die "Invalid compression: $compression. Expected gz or bz2.";
	}
}

sub tempdir {
	return File::Temp::tempdir("pristine-comp.XXXXXXXXXX",
		TMPDIR => 1, CLEANUP => !$keep);
}

sub detect_compression {
	# copied from pristine-tar
	my $compfile=shift;

	open (IN, "<", $compfile) || die "Cannot read $compfile: $!\n";
	my ($chars, $id1, $id2, $method);
	if (read(IN, $chars, 10) == 10 &&
		(($id1, $id2, $method) = unpack("CCC", $chars)) &&
			$id1 == GZIP_ID1 && $id2 == GZIP_ID2 &&
			$method == GZIP_METHOD_DEFLATE) {
		return 'gz';
	}
	else {
		seek(IN, 0, 0) || die "Cannot seek within $compfile: $!";
		if (read(IN, $chars, 3) == 3 &&
			(($id1, $id2, $method) = unpack("CCC", $chars)) &&
				$id1 == BZIP2_ID1 && $id2 == BZIP2_ID2 &&
				$method == BZIP2_METHOD_HUFFMAN) {
			return 'bz2';
		}
	}
}

sub readbzip2 {
	my $filename = shift;
	my $chars;

	open(BZIP2, "< $filename")
		or die("Could not open '$filename' for reading: $!\n");

	if (read(BZIP2, $chars, 4) != 4) {
		die("Unable to read from input\n");
	}

	my ($id1, $id2, $method, $level)
		= unpack("CCCC", $chars);
	# we actually want the value, not the ascii position
	$level-=48;

	if ($id1 != BZIP2_ID1 || $id2 != BZIP2_ID2 || $method != BZIP2_METHOD_HUFFMAN || $level !~ /^[1-9]$/) {
		die("This is not a valid BZip2 archive.\n");
	}

	close(BZIP2);

	return ($level);
}

sub predictbzip2args {
	my ($level, $program) = @_;

	my @args;
	push @args, "-$level";

	if ($program eq 'zgz') {
		push @args, '--old-bzip2';
	}

	return @args;
}

sub bz2_pipe_command {
	my ($program, @args) = @_;

	if ($program eq '7z') {
		# 7z takes convincing to behave like a unix filter
		return ($program, '-tbzip2', '-si', '-so', @args, 'a', 'dummy');
	}
	else {
		return ($program, @args, '-c');
	}
}

sub test_compression {
	no warnings 'once';

	my ($orig, $tmpin, $program, @args) = @_;
	my @cmd = ($program, @args);
	my $cmp_exit_status;

	vprint(@cmd, "<", $tmpin, "|cmp -s -- $orig");
	open(INFILE, "<", $tmpin) or die(
		"Could not open '$tmpin' for reading: $!\n");
	my $cmp_pid = open CMP, "|-", "cmp -s -- $orig" or die(
		"Could not spawn cmp: $!\n");
	my $bz2_pid = open2(">&CMP", "<&INFILE", @cmd);

	my $dead_pid = wait;
	if ($dead_pid == $cmp_pid) {
		$cmp_exit_status = WEXITSTATUS($?);
		#print STDERR "cmp exit status $cmp_exit_status raw $?\n";
		close CMP;
		# Don't waste time compressing the rest, would get a SIGPIPE anyway
		kill 'KILL', $bz2_pid;
		# Don't leave a zombie
		waitpid $bz2_pid, 0;
		#print STDERR "$program exit status (raw, after cmp) $?\n";
	}
	elsif ($dead_pid == $bz2_pid) {
		#print STDERR "$program exit status (raw, before cmp) $?\n";
		# Implicit waitpid
		close CMP;
		$cmp_exit_status = WEXITSTATUS($?);
		#print STDERR "cmp exit status $cmp_exit_status raw $?\n";
	}
	elsif ($dead_pid < 0) {
		die("Error waiting for child processes: $!");
	}
	else {
		die "Unexpected child process event: $dead_pid, $?";
	}

	return $cmp_exit_status == 0;
}

sub test_bz2_variant {
	my ($orig, $tmpin, $program, @args) = @_;
	my @cmd = bz2_pipe_command($program, @args);
	return test_compression($orig, $tmpin, @cmd);
}

sub reproducebzip2 {
	my ($orig, $tempdir, $tmpin) = (shift, shift, shift);

	#my $tempout="$tempdir/test.bz2"; # xdelta only
	doit_redir($orig, $tmpin, "bzip2", "-dc");

	# read fields from bzip2 headers
	my ($level) = readbzip2($orig);
	debug("level: $level");

	foreach my $program (@supported_bzip2_programs) {
		# try to guess the bzip2 arguments that are needed by the
		# header information
		my @args = predictbzip2args($level, $program);

		test_bz2_variant($orig, $tmpin, $program, @args)
			&& return $program, @args;
	}

	# 7z has a weird syntax, not supported yet, as not seen in the wild
	#test_bz2_variant($orig, $tmpin, "7z", "-mx$level") \
	# && return "7z", "-mx$level";

	# pbzip2 -b option affects output, but cannot be detected from a
	# header.
	if ($try) {
		my @args = predictbzip2args($level, "pbzip2");
		print STDERR "pristine-comp will have to try especially hard to reproduce $orig\n";
		print STDERR "(This could take a long time.)\n";
		my %tried;
		$tried{9}=1; # default
 		# Try searching for likely candidates first, and fill in.
		# It could go higher than 100, but have to stop somewhere.
		STDERR->autoflush(1);
		foreach my $try (1..10,
		                 15, 20, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95,
				 1..100) {
			next if $tried{$try};
			$tried{$try}=1;
			print STDERR "\r\tblock size: $try   ";
			test_bz2_variant($orig, $tmpin, "pbzip2", "-b${try}", @args) &&
				return "pbzip2", "-b${try}", @args;
		}
		print STDERR "\n";
	}

	print STDERR "pristine-comp failed to reproduce build of $orig\n";
	print STDERR "(Please file a bug report.)\n";
	exit 1;
}


sub readgzip {
	my $filename = shift;
	my $chars;

	open(GZIP, "< $filename")
		or die("Could not open '$filename' for reading: $!\n");

	if (read(GZIP, $chars, 10) != 10) {
		die("Unable to read from input\n");
	}

	my ($id1, $id2, $method, $flags, $timestamp, $level, $os, $name)
		= (unpack("CCCb8VCC", $chars), '');

	if ($id1 != GZIP_ID1 || $id2 != GZIP_ID2 || $method != GZIP_METHOD_DEFLATE) {
		die("This is not a valid GZip archive.\n");
	}
	my @flags = split(//, $flags);

	if ($flags[GZIP_FLAG_FNAME]) {
		# read a null-terminated string
		$name .= $chars
			while (read(GZIP, $chars, 1) == 1 && ord($chars) != 0);
	}
	close(GZIP);

	return (\@flags, $timestamp, $level, $os, $name);
}

sub predictgzipargs {
	my ($flags, $timestamp, $level) = @_;
	my @flags = @$flags;

	my @args;
	unless ($flags[GZIP_FLAG_FNAME]) {
		push @args, '-n';
		push @args, '-M' if $timestamp;
	}

	if ($level == GZIP_COMPRESSION_BEST) {
		push @args, '-9'
	}
	elsif ($level == GZIP_COMPRESSION_FAST) {
		push @args, '-1'
	}

	return @args;
}

sub reproducegz {
	my ($orig, $tempdir, $tmpin) = @_;
	my $tempout="$tempdir/test.gz"; # Don't rename, appears in xdelta
	# Exit 2 is a warning status, eg, extra data at the end
	doit_redir_opts($orig, $tmpin, { ok_status => [0, 2], }, "gzip", "-dc");

	# read fields from gzip headers
	my ($flags, $timestamp, $level, $os, $name) = readgzip($orig);
	debug("flags: [".join(", ", @$flags).
		"] timestamp: $timestamp level: $level os: $os name: $name");

	# try to guess the gzip arguments that are needed by the header
	# information
	my @args = predictgzipargs($flags, $timestamp, $level);
	my @extraargs = ("-F", $name, "-T", $timestamp);

	my @try;

	if ($os == GZIP_OS_UNIX) {
		# for 98% of the cases the simple heuristic above works
		# and it was produced by gnu gzip.
		push @try, ['--gnu', @args];
		push @try, ['--gnu', @args, '--rsyncable'];
	}

	if ($name =~ /\//) {
		push @args, "--original-name", $name;
		@extraargs = ("-T", $timestamp);
		$name = basename($name);
	}

	# set the Operating System flag to the one found in the original
	# archive
	push @args, ("--osflag", $os) if $os != GZIP_OS_UNIX;

	# many of the .gz out there are created using the BSD version of
	# gzip which is using the zlib library; try with our version of
	# bsd-gzip with added support for the undocumented GNU gzip options
	# -m and -M
	push @try, [@args];

	# apparently, there is an old version of bsd-gzip (or a similar tool
	# based on zlib) that creates gz using maximum compression (-9) but
	# does not indicate so in the headers. surprisingly, there are many
	# .gz out there.
	push @try, [@args, '--quirk', 'buggy-bsd'];

	# Windows' NTFS gzip implementation; quirk is really really evil
	# it should be the last test: it can result in a corrupted archive!
	if ($os == GZIP_OS_NTFS) {
		pop @args; pop @args; # ntfs quirk implies NTFS osflag
		push @try, [@args, '--quirk', 'ntfs'];
	}

	my $origsize=(stat($orig))[7];
	my ($bestvariant, $bestsize);

	foreach my $variant (@try) {
		if (test_compression($orig, $tmpin,
				'zgz', @$variant, @extraargs, '-c')) {
			return $name, $timestamp, undef, @$variant;
		}
	}

	# Nothing worked perfectly, generate deltas keeping the best variant
	foreach my $variant (@try) {
		doit_redir($tmpin, $tempout, 'zgz', @$variant, @extraargs, '-c');

		# generate a binary delta and see if this is the best so far
		my $ret=system("xdelta delta -0 --pristine $tempout $orig $tempdir/tmpdelta 2>/dev/null") >> 8;
		# xdelta exits 1 on success
		if ($ret == 1) {
			my $size=(stat("$tempdir/tmpdelta"))[7];
			if (! defined $bestsize || $size < $bestsize) {
				$bestvariant = $variant;
				$bestsize=$size;
				rename("$tempdir/tmpdelta", "$tempdir/bestdelta") || die "rename: $!";
			}
		}
	}

	die "No usable xdelta" unless (defined $bestsize);

	# use the delta that was generated for the best variant
	my $percentover=100 - int (($origsize-$bestsize)/$origsize*100);
	debug("Using delta to best variant, bloating $percentover%: @$bestvariant");
	if ($percentover > 10) {
		print STDERR "warning: pristine-comp cannot reproduce build of $orig; ";
		if ($percentover >= 100) {
			print STDERR "storing entire file in delta!\n";
		}
		else {
			print STDERR "storing $percentover% size diff in delta\n";
		}
		print STDERR "(Please consider filing a bug report so the delta size can be improved.)\n";
	}
	return $name, $timestamp, "$tempdir/bestdelta", @$bestvariant;
}

sub sha1_b64_of_file {
	my $file=shift;
	my $sha1_state=Digest::SHA->new('1');
	$sha1_state->addfile($file);
	my $sha1_b64=$sha1_state->b64digest;
	return $sha1_b64;
}

sub restore_cmd_bz2 {
	my $params_s=shift;
	my $program=shift;

	my @params=split(' ', $params_s);
	while (@params) {
		$_=shift @params;
		next if /^(-[1-9])$/;
		next if $_ eq '--old-bzip2';
		die "paranoia check failed on params field from delta ($params_s)";
	}
	@params=split(' ', $params_s);

	if (! grep { $program eq $_ } @supported_bzip2_programs) {
		die "paranoia check failed on program file from delta ($program)";
	}

	my @zgz=bz2_pipe_command($program, @params);

	return @zgz;
}

sub restore_cmd_gz {
	my $params_s=shift;
	my $timestamp=shift;
	my $origname=shift;

	my @params=split(' ', $params_s);
	while (@params) {
		$_=shift @params;
		next if /^(--gnu|--rsyncable|-[nmM1-9])$/;
		if (/^(--original-name|--quirk|--osflag)$/) {
			shift @params;
			next;
		}
		die "paranoia check failed on params field from delta ($params_s)";
	}
	@params=split(' ', $params_s);

	$origname=~s/^.*\///; # basename isn't strong enough
	my @zgz=("zgz", @params, "-T", $timestamp);
	if (! grep { $_ eq "--original-name" } @params) {
		push @zgz, "-F", "$origname";
	}
	push @zgz, "-c";

	return @zgz;
}

sub reproduce_comp {
	my ($compfile, $tempdir, $tmpin) = @_;
	my ($filename, $timestamp, $xdelta, $program, @params);

	$compression //= detect_compression($compfile);

	if (not defined $compression) {
		die "Couldn't detect compression. Use the -c option.";
	}
	elsif ($compression eq 'gz') {
		($filename, $timestamp, $xdelta, @params)=
			reproducegz($compfile, $tempdir, "$tempdir/uncompressed");
	}
	elsif ($compression eq 'bz2') {
		($program, @params)=
			reproducebzip2($compfile, $tempdir, "$tempdir/uncompressed");
	}
	else {
		# In case we detect types we don't support.
		require_supported_compression();
	}

	# Returning arrays is tricky
	return (
		'filename' => $filename,
		'timestamp' => $timestamp,
		'xdelta' => $xdelta,
		'program' => $program,
		'params' => \@params,
	);
}

sub restore_common {
	my $tempdir=shift;
	my $pristine_sha1_b64=shift;
	my $xdelta=shift;
	my $uncompressed=shift;
	my $outfile=shift;
	my @zgz=@_;

	if (defined $xdelta) {
		# Incidentally matches the name xdelta stored
		my $tfile="$tempdir/test.$compression";
		doit_redir($uncompressed, $tfile, @zgz);
		doit("xdelta", "patch", "--pristine", $xdelta, $tfile, "$outfile");
	}
	else {
		doit_redir($uncompressed, $outfile, @zgz);
	}
	if (defined $pristine_sha1_b64) {
		my $sha1_b64=sha1_b64_of_file($outfile);
		if ($sha1_b64 ne $pristine_sha1_b64) {
			die "SHA1 mismatch: $outfile has digest $sha1_b64, should be $pristine_sha1_b64";
		}
	}
}

sub gencomp {
	my $delta=shift;
	my $infile=shift;

	my $tempdir=tempdir();
	my $delta_abs = ($delta eq "-") ? "/dev/stdin" : File::Spec->rel2abs($delta);
	my ($xdelta, $sha1_b64, @zgz);

	doit("tar", "xf", $delta_abs, "-C", $tempdir, "-m");
	if (! -e "$tempdir/type") {
		die "failed to parse delta $delta\n";
	}

	my $get_metadata = sub {
		my $key = shift;
		open (IN, "$tempdir/$key") || die "delta lacks key $key ($!)";
		my $value=<IN>;
		close IN;
		chomp $value;
		return $value;
	};

	my $version=$get_metadata->('version');
	if ($version >= ($compression eq 'gz' ? 4 : 3)) {
		die "delta is version $version, not supported with $compression compression\n";
	}

	my $type=$get_metadata->('type');
	if (defined $compression and $compression ne $type) {
		die "Delta is for compression $type, you required $compression";
	}
	$compression=$type;
	require_supported_compression();

	if (-e "$tempdir/sha1sum") {
		$sha1_b64=$get_metadata->('sha1sum');
	}
	my $params=$get_metadata->('params');

	if ($compression eq 'gz') {
		my $origname=$get_metadata->('filename');
		my $timestamp=$get_metadata->('timestamp');
		if (-e "$tempdir/delta") {
			$xdelta = "$tempdir/delta";
		}

		@zgz = restore_cmd_gz($params, $timestamp, $origname);
	}
	elsif ($compression eq 'bz2') {
		my $program=$get_metadata->('program');

		@zgz = restore_cmd_bz2($params, $program);
	}

	restore_common($tempdir, $sha1_b64,
		$xdelta, $infile, "$infile.$compression", @zgz);
}

sub unflatten {
	my $tempdir=tempdir();
	my ($xdelta, $uncompressed, @zgz);

	#MIME::Tools->debugging(1);
	my $parser = new MIME::Parser;
	$parser->output_under($tempdir);
	$parser->output_prefix("parts");
	# Doesn't work well; "error near" messages can be a whole tar file.
	#$parser->ignore_errors(0);

	my $entity = $parser->parse(\*STDIN) or die "parse failed\n";
	#$entity->dump_skeleton(\*STDERR) if $verbose;

	if (not $entity->head->count('Flat-Recode-Version')) {
		die "Invalid format; did not find Flat-Recode-Version header";
	}

	my $header_or_die = sub {
		my $tag = shift;
		my $value = $entity->head->get($tag) // die("Missing $tag header");
		chomp $value;
		return $value;
	};

	my ($mime, $version, $pristine_sha1_b64, $type) = (
		$entity->mime_type // die('Content-Type'),
		$header_or_die->('Flat-Recode-Version'),
		$header_or_die->('Pristine-SHA1'),
		$header_or_die->('Type'),
		);

	if ($mime eq 'multipart/flat-recode' and $version eq '1.0') {
		die('Wrong number of parts') unless $entity->parts == 2;
		$xdelta = $entity->parts(0)->bodyhandle->path;
		$uncompressed = $entity->parts(1)->bodyhandle->path;
	}
	elsif ($mime eq 'application/flat-recode' and $version eq '1.0') {
		die('Wrong number of parts') unless $entity->parts == 0;
		$uncompressed = $entity->bodyhandle->path;
	}
	else {
		die "Unsupported mime or version: $mime, $version";
	}

	if (defined $compression and $compression ne $type) {
		die "Flat data is for compression $type, you required $compression";
	}
	$compression=$type;
	require_supported_compression();

	if (not defined $pristine_sha1_b64) {
		die "A hash is mandatory for the flat format";
	}

	if ($compression eq 'gz') {
		my ($filename_urlenc, $timestamp, $params_s) = (
			$header_or_die->('Filename'),
			$header_or_die->('Timestamp'),
			$header_or_die->('Params'),
			);

		@zgz = restore_cmd_gz($params_s, $timestamp,
			URI::Escape::uri_unescape($filename_urlenc));
	}
	elsif ($compression eq 'bz2') {
		my ($program, $params_s) = (
			$header_or_die->('Program'),
			$header_or_die->('Params'),
			);

		@zgz = restore_cmd_bz2($params_s, $program);
	}

	# Going through an outfile due to the way sha1 computation is implemented.
	# Judicious tee-ing to sha1sum could make this unnecessary.
	restore_common($tempdir, $pristine_sha1_b64,
		$xdelta, $uncompressed, "$tempdir/out", @zgz);
	doit('cat', "$tempdir/out");
}

sub delta_common {
	my $compfile=shift;
	my $delta=shift;
	my $tempdir=shift;
	my $with_uncompressed=shift;

	my @files = ();

	my ($filename, $timestamp, $xdelta, $program, $params);
	my %h = reproduce_comp($compfile, $tempdir, "$tempdir/uncompressed");
	($filename, $timestamp, $xdelta, $program, $params) = (
		$h{'filename'},
		$h{'timestamp'},
		$h{'xdelta'},
		$h{'program'},
		$h{'params'},
		);
	my $params_s = join(' ', @$params);
	my $sha1_b64=sha1_b64_of_file($compfile);

	my $add_metadata = sub {
		my $key=shift;
		my $value=shift;
		push @files, $key;
		open(OUT, ">", "$tempdir/$key") || die "$!";
		print OUT "$value\n";
		close OUT;
	};

	$add_metadata->('version', ((defined $xdelta) ? "3.0" : "2.0"));
	$add_metadata->('type', $compression);
	$add_metadata->('sha1sum', $sha1_b64);
	$add_metadata->('params', $params_s);
	if ($compression eq 'gz') {
		$add_metadata->('filename', $filename);
		$add_metadata->('timestamp', $timestamp);
	}
	elsif ($compression eq 'bz2') {
		$add_metadata->('program', $program);
	}

	if (defined $xdelta) {
		rename($xdelta, "$tempdir/delta") || die "rename: $!";
		push @files, "delta";
	}

	my @cmd = ( "tar", "cf", $delta,
	   "-C", $tempdir, "--format=ustar",
	   "--numeric-owner", "--owner=0", "--group=0", "--mode=0644",
	   );
	if ($with_uncompressed) {
		push @files, "uncompressed";
	}
	else {
		push @cmd, "-z";
	}
	foreach my $file (@files) {
		utime(0, 0, "$tempdir/$file") || die "utime: $file: $!";
	}

	doit(@cmd, "--", @files);
}

sub gendelta {
	my $compfile=shift;
	my $delta=shift;
	my $tempdir=tempdir();

	delta_common($compfile, $delta, $tempdir, 0);
}

sub flatten {
	my $tempdir=tempdir();
	my $compfile="$tempdir/in"; # Don't rename, embedded in xdelta

	doit_redir("/dev/stdin", $compfile, "cat");

	my ($filename, $timestamp, $xdelta, $program, $params);
	my %h = reproduce_comp($compfile, $tempdir, "$tempdir/uncompressed");
	($filename, $timestamp, $xdelta, $program, $params) = (
		$h{'filename'},
		$h{'timestamp'},
		$h{'xdelta'},
		$h{'program'},
		$h{'params'},
		);
	my $params_s = join(' ', @$params);

	my $filename_urlenc=URI::Escape::uri_escape($filename);
	my $version="1.0";
	my $mime;
	my $boundary;
	# SHA1 to match our use in Git
	my $sha1_b64;

	$sha1_b64=sha1_b64_of_file($compfile);

	if (defined $xdelta) {
		# These fields and parts are user-controled and could be made
		# to contain the boundary: filename, params, compfile, xdelta.
		# Derive the boundary from them to prevent that.
		# Since the user only controls those values through compfile,
		# just hash compfile.
		$boundary=$sha1_b64;
		$mime="multipart/flat-recode; boundary=$boundary";
	}
	else {
		$mime="application/flat-recode";
	}

	# Is there something erb-like to embed logic in string templates?
	# Or light-weight templates: vars, tests, inclusion of dumb files.
	print <<EOS;
Content-Type: $mime
Flat-Recode-Version: $version
Pristine-SHA1: $sha1_b64
Type: $compression
EOS
	if ($compression eq 'gz') {
		print <<EOS;
Filename: $filename_urlenc
Timestamp: $timestamp
Params: $params_s
EOS
	}
	elsif ($compression eq 'bz2') {
		print <<EOS;
Program: $program
Params: $params_s
EOS
	}

	if (defined $xdelta) {
		print <<EOS;

--$boundary
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

EOS
		doit("cat", $xdelta);
		print <<EOS;

--$boundary
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

EOS
		doit("cat", "$tempdir/uncompressed");
		print "\n--$boundary--\n";
	}
	else {
		print <<EOS;
Content-Transfer-Encoding: binary

EOS
		doit("cat", "$tempdir/uncompressed");
	}
}

Getopt::Long::Configure("bundling");
if (! GetOptions(
	"v|verbose!" => \$verbose,
	"d|debug!" => \$debug,
	"k|keep!" => \$keep,
	"t|try!" => \$try,
	"c|compression=s" => \$compression,
	) || @ARGV == 0)
{
	usage();
	exit 1;
}

if (not defined $compression) {
	my $progname=basename($0);
	if ($progname eq 'pristine-gz') {
		$compression='gz';
	}
	elsif ($progname eq 'pristine-bz2') {
		$compression='bz2';
	}
}
else {
	require_supported_compression();
}

my $command=shift;
if ($command eq 'genbz2') {
	if (@ARGV != 2) {
		usage();
		exit 1;
	}
	# I don't want command, progname, or option precedence to be guesswork.
	# Enforce that those that weren't unspecified match.
	$compression //= 'bz2'; # set if undefined
	$compression eq 'bz2' or die(
		"The genbz2 command supports bz2 compression, not $compression");
	gencomp(@ARGV);
}
elsif ($command eq 'gengz') {
	if (@ARGV != 2) {
		usage();
		exit 1;
	}
	$compression //= 'gz';
	$compression eq 'gz' or die(
		"The gengz command supports gz compression, not $compression");
	gencomp(@ARGV);
}
elsif ($command eq 'gencomp') {
	if (@ARGV != 2) {
		usage();
		exit 1;
	}
	gencomp(@ARGV);
}
elsif ($command eq 'gendelta') {
	if (@ARGV != 2) {
		usage();
		exit 1;
	}
	gendelta(@ARGV);
}
elsif ($command eq 'flatten') {
	if (@ARGV != 0) {
		usage();
		exit 1;
	}
	flatten(@ARGV);
}
elsif ($command eq 'unflatten') {
	if (@ARGV != 0) {
		usage();
		exit 1;
	}
	unflatten(@ARGV);
}
else {
	print STDERR "Unknown subcommand \"$command\"\n";
	usage();
	exit 1;
}
